# Client.java

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Scanner;

public class Client {
    public static void main(String[] args) {
        try {
            Registry registry = LocateRegistry.getRegistry("localhost", 8000);
            PalindromeService service = (PalindromeService) registry.lookup("PalindromeService");
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter a string to check for palindrome: ");
            String input = scanner.nextLine();
            boolean result = service.isPalindrome(input);
            if (result) {
                System.out.println("\"" + input + "\" is a palindrome.");
            } else {
                System.out.println("\"" + input + "\" is NOT a palindrome.");
            }

            scanner.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


# PalindromeService.java

import java.rmi.Remote;
import java.rmi.RemoteException;

public interface PalindromeService extends Remote {
    boolean isPalindrome(String text) throws RemoteException;
}


# PalindromeServiceImpl.java

import java.rmi.server.UnicastRemoteObject;
import java.rmi.RemoteException;

public class PalindromeServiceImpl extends UnicastRemoteObject implements PalindromeService {
    protected PalindromeServiceImpl() throws RemoteException {
        super();
    }

    @Override
    public boolean isPalindrome(String text) throws RemoteException {
        if (text == null) return false;
        String clean = text.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
        return clean.equals(new StringBuilder(clean).reverse().toString());
    }
}

# Server.java

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class Server {
    public static void main(String[] args) {
        try {
            PalindromeService service = new PalindromeServiceImpl();
            Registry registry = LocateRegistry.createRegistry(8000); // Default RMI port
            registry.rebind("PalindromeService", service);
            System.out.println("Server is running...");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
