🧠 What is MapReduce?
MapReduce is a programming model developed by Google for processing large datasets with a parallel, distributed algorithm on a cluster.

It consists of two main phases:

1. Map Phase
Each piece of input is processed independently.

Transforms the input data into intermediate key-value pairs.

In this case: each word becomes a pair like (word, 1).

2. Reduce Phase
The framework groups all pairs by key and processes each group.

Aggregates the intermediate data.

Here: all values for the same word are summed to get total frequency.

This approach allows parallel processing, making it ideal for big data platforms like Hadoop.

🔍 Code Breakdown
✅ Function Definition

def map_reduce(file_path, target_word):
Takes a file path and a target word as input.

Returns the count of how many times the target word appears.

🗺️ Map Phase

mapped_data = [(word.lower(), 1) for line in file for word in line.strip().split()]
Reads the file line by line.

Splits each line into words.

Creates a list of tuples (word, 1) — lowercase to ensure case-insensitive matching.

Example:

Line: "Tung is strong"
Mapped: [('tung', 1), ('is', 1), ('strong', 1)]
🔄 Reduce Phase

for word, count in mapped_data:
    if word == target_word.lower():
        word_count += count
Filters the mapped data to find only those pairs that match the target word.

Adds up the counts for the word.

🖨️ Final Output

print(f"The word '{target_word}' appears {frequency} times.")
Displays the total count of the target_word in the file.

📝 Example Use Case
file_path = 'G.txt': The file containing the text.

target_word = "tung": The word we want to count.

If 'Tung', 'tung', 'TUNG' appear in the file, they are all counted because of .lower().

⚠️ Limitations
It’s not a true parallel MapReduce — this is a single-threaded simulation.

Splitting by .split() doesn’t remove punctuation, which may affect accuracy.

No handling of very large files (wouldn't scale to big data without modification).

