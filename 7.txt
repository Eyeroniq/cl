from mrjob.job import MRJob
from mrjob.step import MRStep
import re

WORD_RE = re.compile(r"[\w']+")

class MRUniqueWordCount(MRJob):

    def mapper(self, _, line):
        # Yield each word once per appearance (case-insensitive)
        for word in WORD_RE.findall(line):
            yield word.lower(), 1

    def reducer(self, word, counts):
        # Just yield the word with a count of 1 to track uniqueness
        yield "unique_word", 1

    def reducer_final(self, key, values):
        # Sum up all the unique word entries
        yield "Total Unique Words", sum(values)

    def steps(self):
        return [
            MRStep(mapper=self.mapper,
                   reducer=self.reducer),
            MRStep(reducer=self.reducer_final)
        ]

if __name__ == '__main__':
    MRUniqueWordCount.run()